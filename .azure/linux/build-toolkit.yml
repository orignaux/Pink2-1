parameters:
  job1: ''
  job2: ''
  job3: ''
  job4: ''
  condition: ''

jobs:
- job: ${{ parameters.job1 }}
  pool:
    vmImage: 'Ubuntu 16.04'
    cancelTimeoutInMinutes: 1
  dependsOn: init_linux
  condition: ${{ parameters.condition }}
  steps:
  - checkout: none #skip checking out the default repository resource

  - bash: |
      mkdir -p $(linux.bdb.prefix)
      wget 'http://download.oracle.com/berkeley-db/db-4.8.30.NC.tar.gz'
      echo '12edc0df75bf9abd7f82f821795bcee50f42cb2e5f76a6a281b85732798364ef db-4.8.30.NC.tar.gz' | sha256sum -c
      tar -xzvf db-4.8.30.NC.tar.gz
      cd db-4.8.30.NC/build_unix
      ../dist/configure --enable-cxx --disable-shared --with-pic --prefix=$(linux.bdb.prefix)
      make -j2
      make -j2 install
    displayName: 'Build BDB4.8'

  - bash: |
      tar cvfz db4.tar.gz -C $(Build.BinariesDirectory)/$(linux.toolkit.name) .
      ls -la db4.tar.gz
    displayName: 'Pack BDB4.8'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish BDB4.8'
    inputs:
      pathtoPublish: '$(System.DefaultWorkingDirectory)/db4.tar.gz'
      artifactName: $(linux.toolkit.name)

# --------------------------------------------------------------------------------------------------

- job: ${{ parameters.job2 }}
  pool:
    vmImage: 'Ubuntu 16.04'
    cancelTimeoutInMinutes: 1
  dependsOn: init_linux
  condition: ${{ parameters.condition }}
  steps:
  - checkout: none #skip checking out the default repository resource

  - bash: |
      mkdir -p $(linux.qrencode.prefix)
      wget 'https://fukuchi.org/works/qrencode/qrencode-3.4.4.tar.gz'
      echo 'e794e26a96019013c0e3665cb06b18992668f352c5553d0a553f5d144f7f2a72 qrencode-3.4.4.tar.gz' | sha256sum -c
      tar -xzvf qrencode-3.4.4.tar.gz
      cd qrencode-3.4.4
      ./configure --disable-shared --enable-static --without-tools --prefix=$(linux.qrencode.prefix)
      make -j2
      make -j2 install
    displayName: 'Build QREncode'

  - bash: |
      tar cvfz qrencode.tar.gz -C $(Build.BinariesDirectory)/$(linux.toolkit.name) .
      ls -la qrencode.tar.gz
    displayName: 'Pack QREncode'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish QREncode'
    inputs:
      pathtoPublish: '$(System.DefaultWorkingDirectory)/qrencode.tar.gz'
      artifactName: $(linux.toolkit.name)

# --------------------------------------------------------------------------------------------------

- job: ${{ parameters.job3 }}
  pool:
    vmImage: 'Ubuntu 16.04'
    cancelTimeoutInMinutes: 1
  dependsOn: init_linux
  condition: ${{ parameters.condition }}
  variables:
    openssl.prefix: ${{ parameters.openssl.prefix }}
  steps:
  - checkout: none #skip checking out the default repository resource

  - bash: |
      mkdir -p $(linux.openssl.prefix)
      wget 'https://www.openssl.org/source/openssl-1.1.1k.tar.gz'
      echo '892a0875b9872acd04a9fde79b1f943075d5ea162415de3047c327df33fbaee5 openssl-1.1.1k.tar.gz' | sha256sum -c
      tar -xzvf openssl-1.1.1k.tar.gz
      cd openssl-1.1.1k
      ./Configure linux-x86_64 no-ssl2 no-ssl3 no-comp --prefix=$(linux.openssl.prefix) no-shared
      make depend
      make -j2
      make -j2 install
    displayName: 'Build OpenSSL'

  - bash: |
      tar cvfz openssl.tar.gz -C $(Build.BinariesDirectory)/$(linux.toolkit.name) .
      ls -la openssl.tar.gz
    displayName: 'Pack OpenSSL'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish OpenSSL'
    inputs:
      pathtoPublish: '$(System.DefaultWorkingDirectory)/openssl.tar.gz'
      artifactName: $(linux.toolkit.name)

# --------------------------------------------------------------------------------------------------

- job: ${{ parameters.job4 }}
  pool:
    vmImage: 'Ubuntu 16.04'
    cancelTimeoutInMinutes: 1
  dependsOn:
    - init_linux
    - ${{ parameters.job3 }}
  condition: ${{ parameters.condition }}
  steps:
  - bash: |
      sudo apt-get update
      sudo apt-get install --no-install-recommends -y \
      build-essential libdb++-dev wget ca-certificates \
      "^libxcb.*-dev" libx11-xcb-dev libglu1-mesa-dev libxrender-dev \
      libxkbcommon-dev libxkbcommon-x11-dev libxi-dev libxfixes-dev \
      libxext-dev libx11-dev libfreetype6-dev libfontconfig1-dev libxml2-dev libdbus-1-dev
    displayName: 'Install Linux Setup'

  - task: DownloadBuildArtifacts@0
    inputs:
      artifactName: $(linux.toolkit.name)
      downloadPath: $(Build.BinariesDirectory)

  - bash: |
      cd $(Build.BinariesDirectory)/$(linux.toolkit.name)
      ls openssl.tar.gz | xargs -i tar xvf {}
    displayName: 'Unpack Deps'

  - bash: |
      wget 'https://download.qt.io/official_releases/qt/5.15/5.15.2/submodules/qtbase-everywhere-src-5.15.2.tar.xz'
      wget 'https://download.qt.io/official_releases/qt/5.15/5.15.2/submodules/qttools-everywhere-src-5.15.2.tar.xz'
      wget 'https://download.qt.io/official_releases/qt/5.15/5.15.2/submodules/qttranslations-everywhere-src-5.15.2.tar.xz'
      wget 'https://download.qt.io/official_releases/qt/5.15/5.15.2/submodules/qtsvg-everywhere-src-5.15.2.tar.xz'
      echo '909fad2591ee367993a75d7e2ea50ad4db332f05e1c38dd7a5a274e156a4e0f8 qtbase-everywhere-src-5.15.2.tar.xz' | sha256sum -c
      echo 'c189d0ce1ff7c739db9a3ace52ac3e24cb8fd6dbf234e49f075249b38f43c1cc qttools-everywhere-src-5.15.2.tar.xz' | sha256sum -c
      echo 'd5788e86257b21d5323f1efd94376a213e091d1e5e03b45a95dd052b5f570db8 qttranslations-everywhere-src-5.15.2.tar.xz' | sha256sum -c
      echo '8bc3c2c1bc2671e9c67d4205589a8309b57903721ad14c60ea21a5d06acb585e qtsvg-everywhere-src-5.15.2.tar.xz' | sha256sum -c
      tar xf qtbase-everywhere-src-5.15.2.tar.xz
      tar xf qttools-everywhere-src-5.15.2.tar.xz
      tar xf qttranslations-everywhere-src-5.15.2.tar.xz
      tar xf qtsvg-everywhere-src-5.15.2.tar.xz
      cd qtbase-everywhere-src-5.15.2/
      # cd src/plugins
      # patch plugins.pro < $(System.DefaultWorkingDirectory)/.azure/windows/fix_no_printer.diff
      # cd ../..
      # cd src/network
      # patch configure.json < $(System.DefaultWorkingDirectory)/.azure/linux/network-cofig.diff
      # cd ../..
      OPENSSL_LIBS="$(linux.openssl.prefix)/lib/libssl.a $(linux.openssl.prefix)/lib/libcrypto.a -ldl" \
      ./configure -prefix $(linux.qt.prefix) \
      -release -c++std c++11 -confirm-license -opensource \
      -no-compile-examples -nomake examples -nomake tests -make libs \
      -dbus-runtime -qt-freetype \
      -no-cups -no-egl -no-eglfs -no-glib -no-icu -no-iconv -no-kms -no-linuxfb \
      -no-libudev -no-mtdev -no-openvg -no-reduce-relocations \
      -no-sql-db2 -no-sql-ibase -no-sql-oci -no-sql-tds \
      -no-sql-mysql -no-sql-odbc -no-sql-psql -no-sql-sqlite \
      -no-sql-sqlite2 -no-use-gold-linker -no-opengl \
      -openssl-linked -optimized-qmake -pch -pkg-config -qt-libpng \
      -qt-libjpeg -qt-harfbuzz -qt-pcre -system-zlib -strip -static -silent -v \
      -no-feature-sessionmanager -no-feature-dial -no-feature-printer -no-feature-printdialog \
      -no-feature-printpreviewdialog -no-feature-printpreviewwidget \
      -no-feature-ftp -no-feature-lcdnumber -no-feature-pdf -no-feature-concurrent \
      -no-feature-sql -no-feature-statemachine -no-feature-syntaxhighlighter \
      -no-feature-textbrowser -no-feature-textodfwriter -no-feature-wizard \
      -feature-xml -feature-thread \
      -I $(linux.openssl.prefix)/include
      echo "host_build: QT_CONFIG ~= s/system-zlib/zlib" >> mkspecs/qconfig.pri
      echo "CONFIG += force_bootstrap" >> mkspecs/qconfig.pri
      make sub-src-clean
      cd ../qttranslations-everywhere-src-5.15.2
      ../qtbase-everywhere-src-5.15.2/bin/qmake qttranslations.pro -o Makefile
      cd translations
      ../../qtbase-everywhere-src-5.15.2/bin/qmake translations.pro -o Makefile
      cd ../../qttools-everywhere-src-5.15.2/src/linguist/lrelease/
      ../../../../qtbase-everywhere-src-5.15.2/bin/qmake lrelease.pro -o Makefile
      cd ../../../../qtsvg-everywhere-src-5.15.2
      ../qtbase-everywhere-src-5.15.2/bin/qmake qtsvg.pro -o Makefile
      cd ../qtbase-everywhere-src-5.15.2/
      make -j2
      sudo make -j2 install
      make -j2 -C ../qttools-everywhere-src-5.15.2/src/linguist/lrelease
      sudo make -j2 -C ../qttools-everywhere-src-5.15.2/src/linguist/lrelease install_target
      make -j2 -C ../qttranslations-everywhere-src-5.15.2
      sudo make -j2 -C ../qttranslations-everywhere-src-5.15.2 install_subtargets
      make -j2 -C ../qtsvg-everywhere-src-5.15.2
      sudo make -j2 -C ../qtsvg-everywhere-src-5.15.2 install
    displayName: 'Build Qt'

  - bash: |
      sudo python3 .azure/windows/fix_prl.py $(linux.qt.prefix) \
      lib plugins/bearer plugins/generic plugins/iconengines plugins/imageformats \
      plugins/platforminputcontexts plugins/platforms plugins/platformthemes
    displayName: 'Fix prls'

  - bash: |
      rm $(Build.BinariesDirectory)/$(linux.toolkit.name)/*.tar.gz
      rm -rf $(Build.BinariesDirectory)/$(linux.toolkit.name)/openssl
      tar cvfz qt.tar.gz -C $(Build.BinariesDirectory)/$(linux.toolkit.name) .
      ls -la qt.tar.gz
    displayName: 'Pack Qt5'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Qt5'
    inputs:
      pathtoPublish: '$(System.DefaultWorkingDirectory)/qt.tar.gz'
      artifactName: $(linux.toolkit.name)
